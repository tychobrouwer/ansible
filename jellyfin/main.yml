---
- name: Initiate server
  hosts: all

  vars_files:
    - vars.yml
    - vars-private.yml

  vars:
    xz_package: xz-utils
    libicu_package: libicu-dev

  pre_tasks:
    - name: Overwrite vars for Red Hat
      set_fact:
        xz_package: xz
        libicu_package: libicu
      when: ansible_os_family == "RedHat"

    - name: Update cache if needed (Debian)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Update packages
      ansible.builtin.package:
        name: "*"
        state: latest

    - name: Ensure required packages are installed (Debian)
      ansible.builtin.package:
        name:
          - "{{ xz_package }}"
          - "{{ libicu_package }}"
        state: present

    - name: Ensure required packages are installed (RedHat)
      ansible.builtin.package:
        name:
          - epel-release
        state: present
      when: ansible_os_family == "RedHat"

    - name: Ensure RPM Fusion is installed (RedHat)
      ansible.builtin.yum:
        name:
          - "{{ rpmfusion_free_repo }}"
          - "{{ rpmfusion_nonfree_repo }}"
        disable_gpg_check: true
        state: present
      when: ansible_os_family == "RedHat"

    - name: Ensure powertools repository is enabled (RedHat)
      ansible.builtin.command: yum config-manager --set-enabled powertools
      changed_when: false
      when: ansible_os_family == "RedHat"

  tasks:
    - name: Ensure share group exists
      ansible.builtin.group:
        name: "{{ share_group }}"
        gid: 3500
        state: present

    - name: Ensure jellyfin user group exists
      ansible.builtin.group:
        name: "{{ user_name }}"
        gid: 3501
        state: present

    - name: Ensure jellyfin user exists
      ansible.builtin.user:
        name: "{{ user_name }}"
        group: "{{ user_name }}"
        uid: 1000
        password: "{{ jellyfin_password | password_hash(hashtype='sha512', salt=jellyfin_salt) }}"
        state: present

    - name: Ensure jellyfin is in share permissions
      ansible.builtin.user:
        name: "{{ user_name }}"
        groups: "{{ share_group }}"
        state: present

    - name: Ensure share folder exists
      ansible.builtin.file:
        path: /share
        state: directory
        mode: "0775"

- name: Install jellyfin
  hosts: all

  vars_files:
    - vars.yml

  tasks:
    - name: Get and unarchive jellyfin headless server files if not present
      ansible.builtin.unarchive:
        src: "{{ jellyfin_download_folder }}/jellyfin_{{ jellyfin_version }}_amd64.tar.gz"
        dest: "{{ install_location }}"
        remote_src: true
        mode: "0755"

    - name: Ensure symbolic link to jellyfin location is present
      ansible.builtin.file:
        src: "{{ install_location }}/jellyfin_{{ jellyfin_version }}"
        dest: "{{ install_location }}/jellyfin"
        state: link

    - name: Ensue jellyfin data folders are present
      ansible.builtin.file:
        path: "{{ install_location }}/jellyfin_{{ jellyfin_version }}/{{ item }}"
        state: directory
        mode: "0644"
      loop:
        - data
        - cache
        - config
        - log

    - name: Ensure ffmpeg jellyfin is installed (Debian)
      ansible.builtin.apt:
        deb: "{{ ffmpeg_download_folder }}/{{ ffmpeg_version }}/jellyfin-ffmpeg5_{{ ffmpeg_version }}-bullseye_amd64.deb"
      when: ansible_os_family == "Debian"

    - name: Ensure ffmpeg jellyfin is installed (RedHat)
      ansible.builtin.package:
        name:
          - ffmpeg
          - ffmpeg-devel
        state: present
      when: ansible_os_family == "RedHat"

    - name: Ensure jellyfin start script is on remote
      ansible.builtin.copy:
        src: ./jellyfin.sh
        dest: "{{ install_location }}/jellyfin/jellyfin.sh"
        mode: "0755"

    - name: Ensure jellyfin service file is on remote (systemd)
      ansible.builtin.copy:
        src: ./jellyfin.service
        dest: /etc/systemd/system/jellyfin.service
        mode: "0664"
      when: not ansible_distribution == "CentOS"

    - name: Ensure jellyfin service file is on remote (sysvinit)
      ansible.builtin.copy:
        src: ./jellyfin
        dest: /etc/init.d/jellyfin
        mode: "0755"
      when: ansible_distribution == "CentOS"

    - name: Ensure jellyfin service is enabled and started
      ansible.builtin.service:
        name: jellyfin
        state: started
        enabled: true

    - name: Ensure jellyfin file permissions are correct
      ansible.builtin.file:
        path: "{{ install_location }}/jellyfin_{{ jellyfin_version }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: "0755"
        recurse: true

- name: Install NVIDIA and configure drivers
  hosts: all

  vars_files:
    - vars.yml

  tasks:
    # tutorial: https://theorangeone.net/posts/lxc-nvidia-gpu-passthrough/
    - name: Ensure NVIDIA installer is present
      ansible.builtin.get_url:
        url: "{{ NVIDIA_download_url }}"
        dest: "/root/NVIDIA-Linux-x86_64-{{ NVIDIA_version }}.run"
        mode: "0755"

    - name: Run NVIDIA installer
      ansible.builtin.command: "/root/NVIDIA-Linux-x86_64-{{ NVIDIA_version }}.run -asq"
      register: nvidia_installer
      changed_when: "'appears to already be loaded' not in nvidia_installer.stdout"

    - name: Install NVIDIA monitoring package
      ansible.builtin.apt:
        name:
          - nvidia-smi
        state: present
