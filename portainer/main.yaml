---
- name: Setup server
  hosts: all

  pre_tasks:
    - name: Update cache if needed (Debian)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Update packages
      ansible.builtin.package:
        name: "*"
        state: latest

    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

  tasks:
    - name: Ensure config files are present on remote
      ansible.builtin.copy:
        src: ./config/
        dest: /root
        mode: "0644"

- name: Install Docker
  hosts: all

  vars_files:
    - vars.yaml
    - vars-private.yaml

  tasks:
    - name: Ensure docker GPG signing key is installed
      ansible.builtin.apt_key:
        url: "{{ docker_ce_deb_gpg }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure docker repository is added
      ansible.builtin.apt_repository:
        repo: "{{ docker_ce_deb_repo }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure docker tools are installed
      ansible.builtin.package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Ensure docker service is started and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Ensure web network for Traefik is present
      docker_network:
        name: web-secure
        internal: false
        state: present

- name: Install Traefik container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure traefik static config is on remote
      ansible.builtin.template:
        src: ./templates/traefik-static.yaml.j2
        dest: /root/traefik-static.yaml
        mode: "0644"

    - name: Ensure traefik dynamic config is on remote
      ansible.builtin.template:
        src: ./templates/traefik-dynamic.yaml.j2
        dest: /root/traefik-dynamic.yaml
        mode: "0644"

    - name: Ensure proxmox certificate is on remote
      copy:
        dest: /root/cert-proxmox.crt
        content: "{{ cert_proxmox_backup }}"
        mode: '0600'

    - name: Ensure cloudflare origin certificate is on remote
      copy:
        dest: /root/tbrouwer-cloudflare-origin.cert
        content: "{{ cloudflare_origin_cert }}"
        mode: '0600'

    - name: Ensure cloudflare origin key is on remote
      copy:
        dest: /root/tbrouwer-cloudflare-origin.key
        content: "{{ cloudflare_origin_key }}"
        mode: '0600'

    - name: Ensure Traefik reverse proxy Docker container is running
      community.docker.docker_container:
        name: traefik
        image: traefik:latest
        state: started
        command:
          - --configFile=/etc/traefik/static.yaml
        ports:
          - "443:443"
          - "8080:8080"
        restart_policy: unless-stopped
        networks:
          - name: web-secure
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /root/traefik-static.yaml:/etc/traefik/static.yaml
          - /root/traefik-dynamic.yaml:/etc/traefik/dynamic.yaml
          - /root/cert-proxmox.crt:/root/cert-proxmox.crt:ro
          - /root/tbrouwer-cloudflare-origin.cert:/root/tbrouwer-cloudflare-origin.cert:ro
          - /root/tbrouwer-cloudflare-origin.key:/root/tbrouwer-cloudflare-origin.key:ro

- name: Install Portainer container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure Portainer Docker volume is present
      community.docker.docker_volume:
        name: portainer_data

    - name: Ensure Portainer Docker container is running
      community.docker.docker_container:
        name: portainer
        image: portainer/portainer-ce:linux-amd64
        state: started
        ports:
          - "8000:8000"
          - "9000:9000"
        labels:
          traefik.enable: "true"
          traefik.http.routers.portainer.rule: "Host(`portainer.{{ root_domain }}`)"
          traefik.http.routers.portainer.entrypoints: "web-secure"
          traefik.http.routers.portainer.service: "portainer"
          traefik.http.routers.portainer.tls: "true"
          traefik.http.routers.portainer.middlewares: authelia@file
          traefik.http.services.portainer.loadbalancer.server.port: "9000"
        restart_policy: unless-stopped
        networks:
          - name: web-secure
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data

- name: Install Dashy container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure dashy config is on remote
      ansible.builtin.template:
        src: ./templates/dashy-conf.yaml.j2
        dest: /root/dashy-conf.yaml
        mode: "0644"

    - name: Ensure Dashy Docker container is running
      community.docker.docker_container:
        name: dashy
        image: tychobrouwer/dashy-tychobrouwer
        labels:
          traefik.enable: "true"
          traefik.http.routers.dashy.rule: "Host(`dash.{{ root_domain }}`)"
          traefik.http.routers.dashy.entrypoints: "web-secure"
          traefik.http.routers.dashy.tls: "true"
        state: started
        # ports:
        #   - "90:80"
        networks:
          - name: web-secure
        volumes:
          - /root/dashy-conf.yaml:/app/public/conf.yml
        restart_policy: unless-stopped

- name: Install Cloudflare DDNS container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure Cloudflare DDNS Docker container is running
      community.docker.docker_container:
        name: cloudflare-ddns
        image: oznu/cloudflare-ddns:latest
        env:
          API_KEY: "{{ cloudflare_api_key }}"
          ZONE: "{{ root_domain }}"
          PROXIED: "true"
        restart_policy: unless-stopped

- name: Install InfluxDB container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure InfluxDB Docker volume is present
      community.docker.docker_volume:
        name: influxdb_data

    - name: Ensure InfluxDB Docker container is running
      community.docker.docker_container:
        name: influxdb
        image: influxdb:latest
        ports:
          - "8086:8086"
          - "8089:8089/udp"
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: "{{ influxdb_password }}"
          DOCKER_INFLUXDB_INIT_ORG: homelab
          DOCKER_INFLUXDB_INIT_BUCKET: proxmox
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "{{ influxdb_secret }}"
        volumes:
          - influxdb_data:/var/lib/influxdb
        restart_policy: unless-stopped
        networks:
          - name: web-secure

- name: Install Grafana container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure Grafana Docker volume is present
      community.docker.docker_volume:
        name: grafana_data

    # scp root@192.168.178.103:/var/lib/docker/volumes/grafana_data/_data/grafana.db .\Desktop\
    - name: Ensure Grafana database are present on remote
      ansible.builtin.copy:
        src: ./config/grafana.db
        dest: /var/lib/docker/volumes/grafana_data/_data/grafana.db
        mode: "0660"
        owner: 472
        force: false

    - name: Ensure Grafana Docker container is running
      community.docker.docker_container:
        name: grafana
        image: grafana/grafana-enterprise:latest
        ports:
          - "3000:3000"
        labels:
          traefik.enable: "true"
          traefik.http.routers.grafana.rule: "Host(`grafana.{{ root_domain }}`)"
          traefik.http.routers.grafana.entrypoints: "web-secure"
          traefik.http.routers.grafana.tls: "true"
          traefik.http.routers.grafana.middlewares: authelia@file
          traefik.http.services.grafana.loadbalancer.server.port: "3000"
        networks:
          - name: web-secure
        volumes:
          - /root/grafana.ini:/etc/grafana/grafana.ini
          - grafana_data:/var/lib/grafana
        restart_policy: unless-stopped

- name: Install Passbolt database container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure Passbolt database Docker volume is present
      community.docker.docker_volume:
        name: database_volume

    - name: Ensure Passbolt database Docker container is running
      community.docker.docker_container:
        name: mariadb
        image: mariadb:10.3
        labels:
          watchtower.enable: "false"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mariadb_root_password }}"
          MYSQL_DATABASE: "passbolt"
          MYSQL_USER: "passbolt"
          MYSQL_PASSWORD: "{{ mariadb_database_password }}"
        volumes:
          - database_volume:/var/lib/mysql
        restart_policy: unless-stopped
        ports:
          - "3306:3306"

- name: Install Passbolt container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure Passbolt gpg Docker volume is present
      community.docker.docker_volume:
        name: gpg_volume

    - name: Ensure Passbolt jwt Docker volume is present
      community.docker.docker_volume:
        name: jwt_volume

    - name: Ensure Passbolt Docker container is running
      community.docker.docker_container:
        name: passbolt
        image: passbolt/passbolt:latest
        command: [
          "/usr/bin/wait-for.sh",
          "-t",
          "0",
          "192.168.178.103:3306",
          "--",
          "/docker-entrypoint.sh"
        ]
        env:
          APP_FULL_BASE_URL: "https://passbolt.{{ root_domain }}"
          DATASOURCES_DEFAULT_HOST: "192.168.178.103"
          DATASOURCES_DEFAULT_PORT: "3306"
          DATASOURCES_DEFAULT_DATABASE: "passbolt"
          DATASOURCES_DEFAULT_USERNAME: "passbolt"
          DATASOURCES_DEFAULT_PASSWORD: "{{ mariadb_database_password }}"
          EMAIL_TRANSPORT_DEFAULT_HOST: "{{ smtp_host }}"
          EMAIL_TRANSPORT_DEFAULT_PORT: "587"
          EMAIL_TRANSPORT_DEFAULT_USERNAME: "{{ smtp_username }}"
          EMAIL_TRANSPORT_DEFAULT_PASSWORD: "{{ smtp_password }}"
          EMAIL_TRANSPORT_DEFAULT_TLS: "true"
          PASSBOLT_META_DESCRIPTION: "{{ passbolt_description }}"
        volumes:
          - gpg_volume:/etc/passbolt/gpg
          - jwt_volume:/etc/passbolt/jwt
        restart_policy: unless-stopped
        labels:
          traefik.enable: "true"
          traefik.http.routers.passbolt.rule: "Host(`passbolt.{{ root_domain }}`)"
          traefik.http.routers.passbolt.entrypoints: "web-secure"
          traefik.http.routers.passbolt.tls: "true"
        ports:
          - 4080:80
        networks:
          - name: web-secure

    - name: Ensure passbolt admin is present
      community.docker.docker_container_exec:
        container: passbolt
        command: 'su -m -c "/usr/share/php/passbolt/bin/cake passbolt register_user -u {{ passbolt_email }} -f {{ passbolt_username }} -l {{ passbolt_surname }} -r admin" -s /bin/sh www-data'
      register: passbolt_result
      changed_when: "'Username: The username is already in use' not in passbolt_result.stdout"
      failed_when: false

    - name: Print result passbolt admin
      ansible.builtin.debug:
        msg: "{{ passbolt_result.stdout }}"
      when: "'Username: The username is already in use' not in passbolt_result.stdout"

- name: Install Watchtower container
  hosts: all

  tasks:
    - name: Ensure Watchtower Docker container is running
      community.docker.docker_container:
        name: watchtower
        image: containrrr/watchtower:latest
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        env:
          WATCHTOWER_CLEANUP: "true"
        ports:
          - "3080:3080"
        restart_policy: unless-stopped

- name: Install Authelia container
  hosts: all

  vars_files:
    - vars-private.yaml

  tasks:
    - name: Ensure authelia config is on remote
      ansible.builtin.template:
        src: ./templates/authelia-config.yaml.j2
        dest: /root/authelia-config/configuration.yaml
        mode: "0644"

    - name: Ensure authelia user database is on remote
      ansible.builtin.template:
        src: ./templates/authelia-user-database.yaml.j2
        dest: /root/authelia-config/users_database.yaml
        mode: "0644"

    - name: Ensure authelia jwt secret is on remote
      copy:
        dest: /root/authelia-config/authelia_jwt_secret.key
        content: "{{ authelia_jwt_secret }}"
        mode: '0600'

    - name: Ensure authelia session secret is on remote
      copy:
        dest: /root/authelia-config/authelia_session_secret.key
        content: "{{ authelia_session_secret }}"
        mode: '0600'

    - name: Ensure authelia storage secret is on remote
      copy:
        dest: /root/authelia-config/authelia_storage_secret.key
        content: "{{ authelia_storage_secret }}"
        mode: '0600'

    - name: Ensure authelia smtp password is on remote
      copy:
        dest: /root/authelia-config/smtp_password.password
        content: "{{ smtp_password }}"
        mode: '0600'

    - name: Ensure Authelia Docker container is running
      community.docker.docker_container:
        name: authelia
        image: authelia/authelia:latest
        volumes:
          - /root/authelia-config:/config
        command:
          - "authelia"
          - "--config=/config/configuration.yaml"
        env:
          AUTHELIA_JWT_SECRET_FILE: /config/authelia_jwt_secret.key
          AUTHELIA_SESSION_SECRET_FILE: /config/authelia_session_secret.key
          AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/authelia_storage_secret.key
          AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/smtp_password.password
        restart_policy: unless-stopped
        labels:
          traefik.enable: "true"
          traefik.http.routers.authelia.rule: "Host(`authelia.{{ root_domain }}`)"
          traefik.http.routers.authelia.entrypoints: "web-secure"
          traefik.http.routers.authelia.tls: "true"
          traefik.http.services.authelia.loadbalancer.server.port: "9091"
        networks:
          - name: web-secure
        healthcheck:
              test: ["NONE"]
